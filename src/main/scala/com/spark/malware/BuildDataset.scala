package com.spark.malware

import org.apache.spark.rdd.RDD

/**
  * Created by ram on 11/23/16.
  */
object BuildDataset {

  def buildDataSet( NgramsCollectionForFiles : RDD[(String, String)], finalSetOfFeatures : RDD[String]) = {

    val expectedSet = NgramsCollectionForFiles.map(x => ((x._2.split(":")(0), x._1), 0))

    val Remap_NgramsCollectionForFiles = NgramsCollectionForFiles
      .cogroup(finalSetOfFeatures
        .map { case (x) => (x.trim, "dummy") })
      .filter { x => x._2._2.mkString("") == "dummy" }
      .map(x => {
        val temp = x._2._1.mkString("").split(":")
        ((temp(0), x._1), temp(1).toInt)
      })

    val fileList = RunParameters.sparkContext.parallelize(Constants.MALICIOUS_FILES)
    val fileListNgramsCartesian = fileList
      .cartesian(finalSetOfFeatures)
      .map { case (x, y) => ((x, y), 0) }

    val combinedSet = fileListNgramsCartesian
      .union(Remap_NgramsCollectionForFiles)
      .reduceByKey(_ + _)
      .map(x => (x._1._1, (x._1._2, x._2)))
      .groupByKey()
      .mapValues(x => x.toList.sortBy(_._1))
      .mapValues(x=> {
        var string = Constants.EMPTY_STRING
        for( row <- x ) {
          string += row._2 + Constants.SYMBOL_COMMA
        }
        string
      })
      .map(x=> (x._1, x._2 + ( if( RunParameters.fileTypeSet(x._1) ) Constants.CLASS_ONE else Constants.CLASS_ZERO ) ))

    combinedSet
  }

}
