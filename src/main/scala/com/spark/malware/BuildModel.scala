package com.spark.malware

import org.apache.spark.mllib.classification.{SVMModel, SVMWithSGD}
import org.apache.spark.mllib.linalg.Vectors
import org.apache.spark.mllib.regression.LabeledPoint
import org.apache.spark.mllib.tree.model.RandomForestModel
import org.apache.spark.mllib.tree.{DecisionTree, RandomForest}
import org.apache.spark.rdd.RDD

/**
  * Created by ram on 11/23/16.
  */
object BuildModel {

  var modelType = RunParameters.DEFAULT_MODEL_TYPE

  def setModelType( model : String ) = {
    this.modelType = model
  }

  def getModelType= {
    this.modelType
  }

  def train( records : RDD[LabeledPoint] ) = {

    var model:Any = AnyRef

    if( this.modelType.equals(Constants.SUPPORT_VECTOR_MACHINE) ) {
      model = supportVectorMachine(records)
    }
    else if( this.modelType.equals(Constants.DECISION_TREE) ) {
      model = decisionTree(records)
    }
    else if( this.modelType.equals(Constants.RANDOM_FOREST)) {
      model = randomForest(records)
    }

    model
  }


  def randomForest( records : RDD[LabeledPoint]) = {

    val model = RandomForest.trainRegressor(records,
      Constants.RANDOM_FOREST_PARAMS.categoricalFeaturesInfo,
      Constants.RANDOM_FOREST_PARAMS.numTrees,
      Constants.RANDOM_FOREST_PARAMS.featureSubsetStrategy,
      Constants.RANDOM_FOREST_PARAMS.impurity,
      Constants.RANDOM_FOREST_PARAMS.maxDepth,
      Constants.RANDOM_FOREST_PARAMS.maxBins)

    model
  }

  def supportVectorMachine( records : RDD[LabeledPoint] ) = {

    val model = SVMWithSGD.train(records, Constants.SVM_PARAMS.numIterations)

    // Clear the default threshold.
    model.clearThreshold()

    model
  }

  def decisionTree( records : RDD[LabeledPoint] ) = {

    // Train a DecisionTree model.
    val decisionTreeModel = DecisionTree.trainClassifier(records, Constants.DECISION_TREE_PARAMS.numClasses,
      Constants.DECISION_TREE_PARAMS.categoricalFeaturesInfo,
      Constants.DECISION_TREE_PARAMS.impurity,
      Constants.DECISION_TREE_PARAMS.maxDepth,
      Constants.DECISION_TREE_PARAMS.maxBins)

    decisionTreeModel
  }

}
