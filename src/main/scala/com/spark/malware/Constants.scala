package com.spark.malware

/**
  * Created by ram on 11/23/16.
  */
object Constants {

  val LOCALHOST = "local[*]"
  val APPLICATION_NAME = "DetectMalwareController"
  val REMOTE_MASTER = "spark://10.176.149.136:7077"
  val SYMBOL_COLON = ":"
  val SYMBOL_SPACE = " "
  val SYMBOL_COMMA = ","
  val SYMBOL_DOT = '.'
  val EMPTY_STRING = ""
  val CLASS_ZERO = "0"
  val CLASS_ONE = "1"
  val N_GRAM_SIZE = 8

  val INFORMATION_GAIN = "INFORMATION_GAIN"
  val SINGULAR_VALUE_DECOMPOSITION = "SINGULAR_VALUE_DECOMPOSITION"
  val PRINCIPAL_COMPONENT_ANALYSIS = "PRINCIPAL_COMPONENT_ANALYSIS"
  val SUPPORT_VECTOR_MACHINE="SUPPORT_VECTOR_MACHINE"
  val RANDOM_FOREST = "RANDOM_FOREST"
  val DECISION_TREE="DECISION_TREE"
  val DATASET_EXTN = ".bytes"

  var INPUT_FILES = Array("")
  var MALICIOUS_FILES = Array("")
  var TOTAL_INPUT_FILES = 0
  var TOTAL_MALICIOUS_FILES = 0
  var TOTAL_BENIGN_FILES = 0

  val INFORMATION_GAIN_THRESHOLD = 1.0

  val DATA_SPLIT_TRAINING = 0.6
  val DATA_SPLIT_TESTING = 0.4
  val MACHINE_LEARNING_MODELS = List(SUPPORT_VECTOR_MACHINE,DECISION_TREE, RANDOM_FOREST)

  object DECISION_TREE_PARAMS {
    val numClasses = 2
    val categoricalFeaturesInfo = Map[Int, Int]()
    val impurity = "gini"
    val maxDepth = 25
    val maxBins = 32
  }

  object RANDOM_FOREST_PARAMS {
    val numClasses = 2
    val categoricalFeaturesInfo = Map[Int, Int]()
    val numTrees = 3 // Use more in practice.
    val featureSubsetStrategy = "auto" // Let the algorithm choose.
    val impurity = "variance"
    val maxDepth = 4
    val maxBins = 32
  }

  object SVM_PARAMS {
    val numIterations = 100
  }

}
