package com.spark.malware
import org.apache.spark.rdd.RDD

/**
  * Created by ram on 11/11/16.
  */

object DetectMalwareController {


   def main(args: Array[String]) {

     if( args.length < 3 ) {
       println("DetectMalware: ERROR: Usage DetectMalwareController <input> <datasetInfo> <output>")
       System.exit(1)
     }

     val inputFile = args(0)
     val datasetInfoFile = args(1)
     val outputFile = args(2)

     //load malicious file details
     Utilities.loadDatasetDetails(datasetInfoFile)

     //Extract N-grams
     val NgramsCollection = ExtractFeatures.extractNgrams( inputFile )

     //select required features
     val featureVector = SelectFeatures.generateFeatureSet( NgramsCollection )

     //Build dataset with selectedFeatures
     val dataset = BuildDataset.buildDataSet(NgramsCollection, featureVector)

     //convert data to set of labeled points for training model
     val labeledPoints = Utilities.convertDataToLabeledPoints(dataset)

     //split the input data
     val Array(trainingData, testData) = Utilities.getDataSplit(labeledPoints)

     for( modelName <- Constants.MACHINE_LEARNING_MODELS ) {

       println("DetectMalware: INFO: Building "+ modelName)

       //set model type : Decision Tree, SVM ,Random Forest
       BuildModel.setModelType(modelName)

       //train Model
       val model = BuildModel.train(trainingData)

       //predict the test data and compute Accuracy
       val labelAndPreds = PredictClass.predict(model, testData)

       //print Metrics
       PredictClass.computeAndPrintMetrics(labelAndPreds)
     }

  }

}
