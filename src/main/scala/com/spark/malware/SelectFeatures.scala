package com.spark.malware

import org.apache.spark.rdd.RDD


/**
  * Created by ram on 11/23/16.
  */
object SelectFeatures {

  var selectionMethod = RunParameters.DEFAULT_FEATURE_SELECTION_METHOD

  def setMethod( method : String) = {
      this.selectionMethod = method
  }

  def generateFeatureSet( N_gram_records : RDD[(String, String)]) = {

    if(selectionMethod.equals(Constants.INFORMATION_GAIN) ) {
      val featureSet = selectUsingInformationGain( N_gram_records )
    }
    else if(selectionMethod.equals(Constants.PRINCIPAL_COMPONENT_ANALYSIS) ) {

    }
    else if(selectionMethod.equals(Constants.SINGULAR_VALUE_DECOMPOSITION) ) {

    }

  }

  def computeInformationGain( classCounts : (Int, Int) ): Double = {
    val classZeroCount = classCounts._1
    val classOneCount = classCounts._2

    val informationGain = ( ( Constants.TOTAL_BENIGN_FILES - classZeroCount ) / Constants.TOTAL_BENIGN_FILES ) +
                      ( classZeroCount  / Constants.TOTAL_BENIGN_FILES ) +
                      ( ( Constants.TOTAL_MALICIOUS_FILES - classOneCount ) / Constants.TOTAL_MALICIOUS_FILES ) +
                      ( classOneCount  / Constants.TOTAL_MALICIOUS_FILES )
    informationGain
  }

  def selectUsingInformationGain( NgramRecords : RDD[(String, String)]) = {

    val NgramsWithClassCounts = NgramRecords
      .map( record => ((record._1, record._2), 1 ))
      .reduceByKey(_+_)
      .map( record => ( record._1._1, (record._1._2.toInt, record._2) ))
      .groupByKey()
      .mapValues(list => {
        var classZeroCount = 0
        var classOneCount = 0
        for( row <- list ) {
          if( row._1 == 0 ) {
            classZeroCount = row._2
          }
          else {
            classOneCount = row._2
          }
        }
        (classZeroCount, classOneCount)
      } )
    //.saveAsTextFile("/home/sparknode/output")

    val NgramWithInformationGain = NgramsWithClassCounts
      .map( record => (record._1, computeInformationGain( record._2 ) ) )
      .sortBy( record => record._2, false)
      .filter( record => record._2 > Constants.INFORMATION_GAIN_THRESHOLD )
      .saveAsTextFile("/home/sparknode/output")
  }

  def getFeatureSet() = {

  }
}
